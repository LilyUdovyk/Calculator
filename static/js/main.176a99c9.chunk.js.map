{"version":3,"sources":["utils/validations.ts","utils/index.ts","components/Calculator/style.module.css","components/Calculator/index.tsx","components/Display/index.tsx","components/Display/style.module.css","components/Button/index.tsx","components/Button/style.module.css","App.tsx","serviceWorker.ts","index.tsx"],"names":["checkLastAction","expression","test","checkZeroDigit","isNumber","value","isDot","deleteElement","quantity","output","split","length","slice","join","changeElement","modifiedExpression","changeLastElement","findIndexLastOperator","Math","max","lastIndexOf","findLastOperand","module","exports","buttonsValue","Calculator","React","useState","result","setResult","countDot","setCountDot","equalAction","res","String","Number","eval","toFixed","resetAction","changeOperatorAction","indexLastOperator","lastOperator","substring","lastOperand","findPercentageAction","absoluteValue","expressionValue","toString","othersActions","calculate","className","style","calculator","buttonsContainer","map","item","key","onClick","memo","props","valueContainer","button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.176a99c9.chunk.js","sourcesContent":["// Checks whether the last entered character is an operator\nexport const checkLastAction = (expression: string) => {\n    const actions = /[+/\\-x*.]$/;\n\n  return actions.test(expression);\n};\n\n// Checks whether the last entered character is 0\nexport const checkZeroDigit = (expression: string) => expression === '0';\n\n// Checks whether the last entered character is \".\"\nexport const isDot = (expression: string) => expression === '.';\n\n// Checks whether the last entered character is a number\nexport const isNumber = (value: string) => {\n  const numbers = /[0-9]/;\n\n  return numbers.test(value);\n};\n","import * as Validations from './validations';\n\nexport const {\n  checkLastAction, checkZeroDigit, isNumber, isDot\n} = Validations;\n\n// Removes the specified quantity of elements from the end\nexport const deleteElement = (expression: string, quantity: number) => {\n  let output = expression.split('');\n\n  if (output.length > 1) {\n    return output.slice(0, output.length - quantity).join('');\n  }\n\n  return '0';\n};\n\n// Replaces the element expression[quantity] with the value\nexport const changeElement = (expression: string, value: string, quantity: number) => {\n  let modifiedExpression = expression.split('');\n\n  modifiedExpression[quantity] = value;\n\n  return modifiedExpression.join('');\n};\n\n// Replaces the element expression[quantity] with the value from the end\nexport const changeLastElement = (expression: string, value: string, quantity: number) => {\n  let modifiedExpression = expression.split('');\n\n  modifiedExpression[expression.length - quantity] = value;\n\n  return modifiedExpression.join('');\n};\n\n// Find index of last operator\nexport const findIndexLastOperator = (expression: string) => {\n  return Math.max(\n    expression.lastIndexOf('-'), \n    expression.lastIndexOf('+'), \n    expression.lastIndexOf('*'), \n    expression.lastIndexOf('/')\n  )\n};\n\n// Find value of last operand\nexport const findLastOperand = (expression: string) => {\n  return expression.slice(findIndexLastOperator(expression) + 1)\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calculator\":\"style_calculator__1Xp6j\",\"buttonsContainer\":\"style_buttonsContainer__1iKvQ\"};","import React from 'react';\n\nimport style from './style.module.css'\nimport { \n    checkZeroDigit, \n    checkLastAction, \n    isDot,\n    isNumber, \n    deleteElement, \n    changeElement, \n    changeLastElement, \n    findIndexLastOperator, \n    findLastOperand\n} from '../../utils';\nimport Display from '../Display'\nimport Button from '../Button'\n\nconst buttonsValue = [ \"AC\", \"+/-\", \"%\", \"/\", \"7\", \"8\", \"9\", \"*\", \"4\", \"5\", \"6\", \"-\", \"1\", \"2\", \"3\", \"+\", \"0\", \".\", \"=\" ]\n\nconst Calculator: React.FC = () => {\n    const [result, setResult] = React.useState('0');\n    const [countDot, setCountDot] = React.useState(0);\n\n    // Find the value of the expression\n    const equalAction = () => {\n        if (checkLastAction(result)) { // if the last entered character is an operator\n            setResult(res => deleteElement(res, 1)); // remove this character\n        } else { // find the value of the expression corrected for the calculations js (0.1+0.2 -> 0.3)\n            setResult(res => String(Number(eval(res).toFixed(15))))\n            if (eval(result) % 1 === 0) {\n                setCountDot(0);\n            }\n        }\n    }\n\n    // Clears the expression (5+3 -> 0)\n    const resetAction = () => {\n        setResult('0');\n        setCountDot(0);\n    }\n\n    // Replaces '+' with '-' and '-' with '+'\n    const changeOperatorAction = () => {\n        if (checkLastAction(result)) return // if the last entered character is an operator do nothing\n        let indexLastOperator = findIndexLastOperator(result)\n        let lastOperator = result[indexLastOperator]\n        if (lastOperator === '+') { // if the last operator is “+”\n            setResult(changeElement(result, \"-\", indexLastOperator)); // replace it with '-' (5+3 -> 5-3)\n        } else if (lastOperator === '-') { // if the last operator is “-”\n            setResult(changeElement(result, \"+\", indexLastOperator)); // replace it with '+' (5-3 -> 5+3)\n        } else if (lastOperator === '*' || lastOperator === '/') { // if the last operator is “*” or “/” insert before the operand “-” (5*3 -> 5*-3)\n            let expression = result.substring(0, indexLastOperator + 1)\n            let lastOperand= findLastOperand(result)\n            setResult(expression + '-' + lastOperand);\n        } else { // if any operators were entered add \"-\" before the operand (3 -> -3)\n            setResult('-' + result);\n        }\n    }\n\n    const findPercentageAction = () => {\n        if (checkLastAction(result)) return // if the last entered character is an operator do nothing\n        setResult(deleteElement(result, 1));\n        let absoluteValue= +findLastOperand(result) / 100\n        let indexLastOperator = findIndexLastOperator(result)\n        let lastOperator = result[indexLastOperator]\n        if (lastOperator === '*' || lastOperator === '/') { // if the last operator is '*' or '/'\n            let expression = result.substring(0, indexLastOperator + 1)\n            setResult(expression + absoluteValue); // replace the last operand with his absolute value (100+100*10% -> 100+100*0.1 -> 110)\n            equalAction() // find the value of the expression\n        } else if (lastOperator === '+' || lastOperator === '-') { // if the last operator is '+' or '-' \n            let expressionValue = eval(result.substring(0, indexLastOperator))\n            setResult(expressionValue + lastOperator + absoluteValue * expressionValue); // add specified proportion of expression (100+100+10% -> 100+100+(100+100)*0.1 -> 220)\n            equalAction() // find the value of the expression\n        } else setResult(absoluteValue.toString()) // in all other cases set the expression value of his absolute value\n    }\n\n    const othersActions = (value: string) => {\n        if (checkLastAction(value)) { // if the last entered character is an operator\n            if (isDot(value)) { // if the last entered character is '.'\n                setCountDot(countDot + 1);\n\n                if (countDot < 1) { // add '.' to the expression\n                    setResult(result + value);\n                }\n            } else {\n                setCountDot(0);\n                if (checkLastAction(result)) { // if the last character of the expression is an operator\n                    if (value === '-' && result[result.length - 1] !== value) { // if the last entered character is '-' and the last character of the expression doesn’t match the last entered character (5+3* -> 5+3*-)\n                        setResult(result + value); // add the last entered character to the expression\n                    } else if (value !== '-' && result[result.length - 1] === '-' && !(isNumber(result[result.length - 2]))) { // if the last entered character is '-' and the last character of the expression is '-' too and the penultimate character of the expression isn’t number  (5+3*- -> 5+3-)\n                        setResult(deleteElement(result, 2)); // remove the last two characters\n                        setResult(result + value); // add the last entered character to the expression\n                    } else if (value !== '-') { // if the last entered character isn’t '-' (5+3* -> 5+3+)\n                        setResult(changeLastElement(result, value, 1)); // replace the last character of the expression with the last entered character\n                    }\n                } else {\n                    setResult(result + value); // in all other cases add the last entered character to the expression (5+3* -> 5+3*2)\n                }\n            }\n        } else if (value === '0' && result[result.length - 1] === '/') { // check division by 0\n            return\n        } else if (checkZeroDigit(result)) { // if the expression is 0\n            setResult(value); // set the expression value of the last entered character (0 -> 2)\n        } else {\n            setResult(result + value); // in all other cases add the last entered character to the expression (5+3* -> 5+3*2)\n        }\n    }\n\n    const calculate = (value: string) => {\n        switch (value) {\n        case 'AC':\n            resetAction();\n            break;\n        case '=':\n            equalAction();\n            break;\n        case '+/-':\n            changeOperatorAction();\n            break;\n        case '%':\n            findPercentageAction();\n            break;\n        default:\n            othersActions(value);\n            break;\n        }\n    }\n\n    return (\n        <div className={style.calculator}>\n            <Display value={result} />\n            <div className={style.buttonsContainer}>\n                { buttonsValue.map((item: string) => {\n                    return (\n                        <Button \n                            key = {item} \n                            value = {item} \n                            onClick = {() => calculate(item)}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    )\n};\n\nexport default React.memo(Calculator);","import React from \"react\";\n\nimport style from './style.module.css'\n\ninterface Props {\n    value: string,\n}   \n\nconst Display = (props: Props) => {\n  \n  return (  \n    <div className={style.valueContainer}>{props.value}</div>\n  )\n}\nexport default React.memo(Display);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueContainer\":\"style_valueContainer__otD9l\"};","import React from \"react\";\n\nimport style from './style.module.css'\n\ninterface Props {\n    value: string,\n    onClick: () => void\n}   \n\nconst Button = (props: Props) => {\n  \n  return (  \n    <button \n        className={style.button} \n        value={props.value} \n        onClick={props.onClick}\n    > \n        {props.value}\n    </button>\n  )\n}\nexport default React.memo(Button);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__1H5Da\"};","import React from 'react';\n\nimport './App.css';\n\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <Calculator />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}